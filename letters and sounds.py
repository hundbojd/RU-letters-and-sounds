# Определить количество  букв и звуков в русском слове
word = input('Введите слово: ').lower()
if not word.isalpha():                   # и проверяем, чтобф там не было ничего, кроме букв
    print('Неверно выполнено условие')

# список йотовых, которые становятся йотированными (словарь) он нужен потому что в звуковом составе йотовые
# из одной буквы иногда превращаются в два звука, от этого будет зависеть количество звуков
vowels_j = {'я': 'йа', 'е': 'йэ', 'ё': 'йо', 'ю': 'йу', 'и': 'йи'}

word_1 = ''                                                # заводим пустую строку, чтобы в нее потом добавлять буквы,
                                                           # постепенно в нее будут добавляться буквы
                                                           # и она станет полноценным словом
for i in range(len(word)):                                             # вот тут мы это и будем делать:
    a = word[i]
    if a in vowels_j:                                      # проверяем содержание буквы в ключах нашего словаря выше:
        if i == 0:                                         # если йотовая в начале слова,
            word_1 += vowels_j[a]                          # добавляем в нашу пустую строку тот вариант, которому соответствует эта йотовая.
        elif word[i - 1] == 'ъ':                           # если перед йотовой стоит ъ или ь,
            word_1 += vowels_j[a]                          # действуем по тому же принципу.
        elif word[i - 1] == 'ь':
            word_1 += vowels_j[a]                          # действуем по тому же принципу.
        elif word[i - 1] in 'ёуеыаоэяию':                  # если перед йотовой стоит друкая гласная,
            word_1 += vowels_j[a]                          # снова делаем так же.
        else:                                              # если она есть в списке, но предыдущие условия не выполняются,
            word_1 += a                                    # просто добавляем эту гласную в слово (она все равно означает то же количество, нет нужды менять я на а :)
    else:                                                  # если буквы нет в словаре (аоуэы, согласные),    ателье
        word_1 += a                                        # то тоже просто добавляем ее в слово

# на этом этапе word_1 будет выглядеть как слово изначальное, но с заменами йотовых
# (япония - йапонийа, можешь написать принт ворд 1 и тебе выдаст результат)
# теперь по похожему принципу будем менять двойные согласные на одинарные
word_2 = ''
word_2 += word_1[0]
for i in range(1, len(word_1)):
    a = word_1[i]
    if word_1[i-1] == word_1[i]:                                      # проверяем наличие двух повторяющихся букв, если есть,
        continue                 # заменяем 2 буквы на 1.
    else:                                                  # если нет таких -
        word_2 += a                                    # просто оставляем слово, как есть
# вот тут у нас получится word_2, который имеет в себе изменения после йотовых и после двойных согласных
# (если там нужны изменения, конечно)

# здесь нам снова понадобится пустая строка, будем работать по принципу, как в первом if
word_0 = ''
for i in word_2:
    if i == 'ь' or i == 'ъ':                               # проверяем наличие ъ и ь, они в слове не нужны
        word_0 += ''                                       # если есть, добавляем в строку пустое место (не пугайся, это просто уберет ъ/ь из слова, ничего более)
    else:
        word_0 += i                                        # ну и если нет ь/ъ, то просто добавляем букву в слово

# и снова у нас результат word_0, в котором есть изменения всех-всех предыдущих действий

# вот эту страшную и непонятную на первый взгляд конструкцию ниже мы, как оказалось, даже брали на парах.
# если коротко - конструкция
# def ccc(x):
# ...
# return
# это шаблон. известная инструкция или последовательность действий, которая будет выполняться с любой переменной,
# которую ты вставишь вместо х. и не придется 1000 раз переписывать одни и те же строчки, достаточно написать ccc(y) и
# программа выполнит те же действия с переменной у вместо х. все очень просто. на самом деле можно было и без нее
# делать, а просто как в прошлых, но надо выпендриться перед марковской, что мы не только иф знаем, но и деф :)
def verbs_etc(x):                                          # задаем название шаблона и переменную, на место которой потом будем подставлять значения
    if 'тс' in x:                                          # тут будем менять тс на ц, потому что в русском так
        word_3 = x.replace('тс', 'ц')                      # если есть тс, меняем ее на ц.
        return word_3                                      # завершаем шаблон, результатом будет именно word_3,
    else:                                                  # потом с ним можно дальше работать.
        word_3 = x                                         # соответственно, если тс нет - слово остается таким же.
        return word_3                                      # ну и в этом случае завершаем шаблон
# в итоге этой операции мы получим лаконичное word_3 со всеми изменениями, которые были получены раньше.
# и уже с ним будут проводиться все подсчеты далее.

# итак, смотрим, какое слово у нас в программе упоминается последним. 1 - йотовые, 2 - двойные согласные, 3 - ъ/ь.
# дальше идет шаблон, поэтому чтобы в шаблоне остались все изменения из ифов, надо вместо х в шаблон записать word_0


a = verbs_etc(word_0)                                      # вот тут мы это и делаем, теперь а = слово, которое
                                                           # получилось после всех наших изменений

letter_count = len(word)                                   # теперь считаем количество букв
sound_count = len(a)                                       # и звуков
# ну и выводим на печать :)
print('Слово', word, 'состоит из', letter_count, 'букв и', sound_count, 'звуков')

# после любого действия ты всегда можешь напечатать print(word_...) и посмотреть, как та или инач комбинация меняет твое
# слово, так будет наглядно видно, что за что отвечает. ну вроде все, не забудь сделать то, что просят в условии
# (примеры советую вводить такие, которые будут именно изменяться в процессе) :)
